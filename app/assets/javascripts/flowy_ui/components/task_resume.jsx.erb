class TaskResume extends React.Component {
  static propTypes = {}

  state = {
    task: null,
    confirm: false,
    error: false,
    errorMessage: null
  }

  componentDidMount() {
    const comp = this
    PubSub.subscribe('TASK_RESUME', function(message, data) {
      comp.setup(data.task)
    })
  }

  confirmResume() {
    this.setState({ confirm: true })
  }

  setup(task) {
    this.setState({
      task: task,
      confirm: false,
      error: false,
      errorMessage: null
    })
  }

  setupPayload() {
    if(this.state.resumeData) {
      try {
        return JSON.parse(this.state.resumeData);
      } catch(e) {
      }
    }
    this.setState({
      error: true,
      errorMessage: "Response to send to the task must be a valid hash/json"
    })
    return null
  }

  resume() {
    const comp = this

    // Setup payload
    var payload = comp.setupPayload()
    if (!payload) {
      return
    }

    $.ajax({
      url: "<%= Rails.application.routes.url_helpers.resume_flowy_instance_tasks_path %>",
      type: "POST",
      data: {
        id: comp.state.task.id,
        response: payload
      },
      headers: {
        token: "abc"
        // TODO: Change this
      },
      dataType: "json",
      success: function(data) {
        if (data.result === "error") {
          comp.setState({
            error: true,
            errorMessage: data.message
          })
        } else {
          PubSub.publish("TASK_PANEL_CLOSE")
        }
      },
      error: function(data) {
        if (data.status === 500) {
          comp.setState({
            error: true,
            errorMessage: data.statusText
          })
          console.log(data.responseText)
        } else {
          comp.setState({
            error: true,
            errorMessage: data.responseJSON.message
          })
        }
      }
    })
  }

  handleChange(event) {
    this.setState({ resumeData: event.target.value });
  }

  renderError() {
    if (this.state.error) {
      return (<div className="notification is-danger">Error: {this.state.errorMessage}</div>)
    }
    return null
  }

  renderConfirmation() {
    return (
      <div>
        <p className="content">Are you sure you want to resume this task?</p>
        <p className="content">Type in the response data (needs to be json) that will be passed to the task.</p>

        <textarea id="resume-data"
                  name="textarea"
                  className="textarea"
                  placeholder='e.g. { "foo": "bar" }'
                  value={this.state.resumeData}
                  onChange={this.handleChange.bind(this)}>
        </textarea>

        <button onClick={this.resume.bind(this)}>Yes</button>
        &nbsp;or&nbsp;
        <button onClick={this.setup.bind(this, this.state.task)}>Cancel</button>
        <br /><br />
        {this.renderError()}
      </div>
    )
  }

  render() {
    if (this.state.confirm) {
      return this.renderConfirmation()
    }

    return (
      <section className="section">
        <p className="content">Resuming this task means we will simulate the task receiving input from an external source.</p>
        <p className="content">
          <button onClick={this.confirmResume.bind(this)}>Let's resume this task</button>
        </p>
        <p className="content">Press resume task to input the data, or cancel by closing this window.</p>
      </section>
    )
  }
}
