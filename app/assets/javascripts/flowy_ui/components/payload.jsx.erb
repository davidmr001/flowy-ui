class Payload extends React.Component {
  static propTypes = {}

  state = {
    taskId: null,
    payload: null,
    edit: false,
    feedback: { message: null, className: null }
  }

  constructor(props) {
    super(props)
  }

  componentDidMount() {
    const comp = this
    PubSub.subscribe('TASK_EDIT_PAYLOAD', function(message, data) {
      comp.clearFeedback()
      comp.setState({ taskId: data.taskId, payload: data.payload, edit: false })
    })
  }

  handleEdit() {
    this.clearFeedback()
    this.toggleEdit()
  }

  toggleEdit() {
    this.setState({ edit: !this.state.edit })
  }

  editButtonClass() {
    var className = "button"
    if (this.state.edit) {
      return className + " is-light"
    }
    return className
  }

  clearFeedback() {
    this.setState({ feedback: { message: null, className: null } } )
  }

  setFeedback(message, error = true) {
    className = "is-success"
    if (error) {
      className = "is-danger"
    }
    this.setState({ feedback: { message: message, className: className } } )
  }

  submit() {
    payload = this.updatePayload()
    if (payload) {
      const comp = this
      const url = "<%= Rails.application.routes.url_helpers.update_payload_flowy_instance_tasks_path %>"

      $.ajax({
        url: url,
        method: "patch",
        headers: {
          token: "abc"
          // TODO: Change this
        },
        data: {
          id: comp.state.taskId,
          instance_task: {
            payload: payload,
          }
        },
        success: function(response) {
          if (response.result == "success") {
            comp.setFeedback(response.message, false)
            comp.setState({ payload: response.payload } )
            comp.toggleEdit()
            PubSub.publish("TASK_PANEL_CLOSE")
          } else {
            comp.setFeedback(response.message)
          }
        },
        error: function(response) {
          comp.setFeedback(response.responseText)
        }
      })
    }
  }

  updatePayload() {
    try {
      return JSON.parse($("#payload-textarea").val())
    } catch(error) {
      this.setFeedback("Invalid JSON payload")
      return false
    }
  }

  renderPayload() {
    if (this.state.edit) {
      return (
        <textarea
          id="payload-textarea"
          className="textarea"
          rows="20"
          defaultValue={JSON.stringify(this.state.payload, null, 2)}>
        </textarea>
      )
    }
    return (
      <pre>{JSON.stringify(this.state.payload, null, 2)}</pre>
    )
  }

  syntaxHighlight(json) {
    if (typeof json != 'string') {
      json = JSON.stringify(json, undefined, 2)
    }
    json = json.replace(/&/g, '&amp').replace(/</g, '&lt').replace(/>/g, '&gt')
    return json.replace(/("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)/g, function (match) {
      var cls = 'number'
      if (/^"/.test(match)) {
        if (/:$/.test(match)) {
          cls = 'key'
        } else {
          cls = 'string'
        }
      } else if (/true|false/.test(match)) {
        cls = 'boolean'
      } else if (/null/.test(match)) {
        cls = 'null'
      }
      return '<span className="' + cls + '">' + match + '</span>'
    })
  }

  renderSubmitButton() {
    if (this.state.edit) {
      return (
        <span>
          <a className="button" onClick={this.submit.bind(this)}>Save Changes</a>
        </span>
      )
    }
    return <span/>
  }

  renderFeedback() {
    feedback = this.state.feedback
    if (!feedback) {
      return null
    }
    return (
      <span className={"notification " + feedback.className} id="feedback">{feedback.message}</span>
    )
  }

  render() {
    return (
      <section className="section">
        <h1 className="title">
          <span>Payload </span>
          <span><a className={this.editButtonClass()} onClick={this.handleEdit.bind(this)}>Edit</a></span>
        </h1>
        <h2 className="subtitle">
          {this.renderPayload()}
          {this.renderFeedback()}
          {this.renderSubmitButton()}
        </h2>
      </section>
    )
  }
}
