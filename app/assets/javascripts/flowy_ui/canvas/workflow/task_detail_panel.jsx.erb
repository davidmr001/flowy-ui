class TaskDetailPanel extends Panel {
  constructor(attributes) {
    super(attributes)

    this.task = attributes.task

    this.setupContent()
  }

  setupContent() {
    this.addChild(
      new Text({
        text: this.task.name,
        size: 16,
        bold: true,
        center: false,
        offsetX: 20,
        offsetY: 40
      })
    )

    var contentY = 75

    var stateColor = INSTANCE_TASK_STATES[this.task.state]
    stateColor = stateColor ? stateColor["backgroundColor"] : THEME.textColor
    this.addChild(
      new Text({
        text: "State: " + (this.task.state || "N/A"),
        size: 12,
        color: stateColor,
        center: false,
        offsetX: 20,
        offsetY: 75
      })
    )
    contentY += 25

    this.addChild(
      new Text({
        text: "All previous tasks required? " + this.task.all_previous_tasks_required,
        size: 12,
        color: THEME.textColor,
        center: false,
        offsetX: 20,
        offsetY: contentY
      })
    )
    contentY += 25

    if (this.task.type === "InstanceTask") {
      if (this.task.state) {
        this.addChild(
          new Button({
            text: "View Payload",
            textColor: THEME.panelBackgroundColor,
            textSize: 10,
            width: 100,
            height: 30,
            backgroundColor: THEME.buttonSuccessBackground,
            center: false,
            offsetX: 20,
            offsetY: contentY,
            onClick: this.onViewPayloadClicked.bind(this)
          })
        )
        contentY += 60
      }

      if (this.task.state && this.task.state !== "ABORTED") {
        if (this.task.state === "WAITING_FOR_INPUT") {
          this.addChild(
            new Button({
              text: "Resume",
              textColor: THEME.textColor,
              textSize: 10,
              width: 100,
              height: 30,
              backgroundColor: INSTANCE_TASK_STATES["WAITING_FOR_INPUT"]["backgroundColor"],
              center: false,
              offsetX: 20,
              offsetY: contentY,
              onClick: this.onResumeTaskClicked.bind(this)
            })
          )
          contentY += 60
        } else {
          this.addChild(
            new Button({
              text: "Restart",
              textColor: THEME.panelBackgroundColor,
              textSize: 10,
              width: 100,
              height: 30,
              backgroundColor: THEME.buttonErrorBackground,
              center: false,
              offsetX: 20,
              offsetY: contentY,
              onClick: this.onRestartTaskClicked.bind(this)
            })
          )
          contentY += 60
        }
      }
    }

    var text = ""
    var func = null
    if (this.task.sub_instance_id || this.task.sub_blueprint_id) {
      // Link to sub instance/blueprint
      text = "Go to sub " + (this.task.sub_instance_id ? "instance" : "blueprint")
      func = this.onGoToSubClicked.bind(this)
      width = 150
    } else {
      text = "View code"
      func = this.onViewSourceClicked.bind(this)
      width = 100
    }
    this.addChild(
      new Button({
        text: text,
        textSize: 10,
        width: width,
        height: 30,
        center: false,
        offsetX: 20,
        offsetY: contentY,
        onClick: func
      })
      )
  }

  onViewSourceClicked() {
    genericModal.setTitle("Source code for task " + this.task.name)
    genericModal.setContent("<pre>" + this.task.class_source + "</pre>")
    genericModal.open()
  }

  onGoToSubClicked() {
    var url =
      this.task.sub_blueprint_id ?
      "<%= Rails.application.routes.url_helpers.flowy_ui_blueprints_path %>/" + this.task.sub_blueprint_id :
      "<%= Rails.application.routes.url_helpers.flowy_ui_instances_path %>/" + this.task.sub_instance_id
    window.location = url
  }

  onViewPayloadClicked() {
    genericModal.setTitle("Payload for task " + this.task.name)
    genericModal.setContent("<pre>" + JSON.stringify(this.task.payload, null, 2) + "</pre>")
    genericModal.open()
  }

  onRestartTaskClicked() {
    restartTaskModal.setTitle("Restart task " + this.task.name)
    // The react component inside the modal will show the appropriate information and actions
    PubSub.publish('TASK_RESTART', { task: this.task });
    restartTaskModal.open()
  }

  onResumeTaskClicked() {
    resumeTaskModal.setTitle("Resume task " + this.task.name)
    // The react component inside the modal will show the appropriate information and actions
    PubSub.publish('TASK_RESUME', { task: this.task });
    resumeTaskModal.open()
  }
}
